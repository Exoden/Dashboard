{% extends "IdleBundle:Default:armory.html.twig" %}

{% block page_armory %}
    <div class="col-md-5 out-menu">
        <div class="col-md-12 menu">
            <h3>Heroes</h3>
            {% for key, hero in heroes %}
                <div id="hero_{{ key }}" class="row details-hero" data-hero="{{ hero.id }}">
                    <p>{{ hero.name }} ({{ hero.age }})</p>
                    {% for type, equipment in equipments[key] %}
                        <div class="item equipment {{ type|lower }}"
                             title="{% if equipment is not null %}{{ equipment.item.name }}{% endif %}"
                             data-stuff="{% if equipment is not null %}{{ equipment.id }}{% endif %}"
                             data-type="{{ type }}"
                             data-toggle="popover" data-placement="top" data-trigger="hover"
                             data-content="{% if equipment is not null %}{% include 'IdleBundle:Default:popover_equipment.html.twig' with {'stuff': equipment} %}{% endif %}">
                            <img src="{% if equipment is not null %}{{ asset('images/Idle/' ~ equipment.item.typeItem.name ~ '/' ~ equipment.item.image) }}{% endif %}" alt="{{ type|lower }}">
                        </div>
                    {% endfor %}
                </div>
            {% endfor %}
        </div>
    </div>
    <div class="col-md-3 out-menu">
        <div class="col-md-12 menu">
            <h3>Stuff</h3>
            <table class="table table-striped table-condensed">
                <thead>
                <tr>
                    <th style="text-align: center">Charac</th>
                    <th style="text-align: center">Equiped</th>
                    <th style="text-align: center">Modif</th>
                    <th style="text-align: center">Selected</th>
                </tr>
                </thead>
                <tbody class="comparison-line">
                </tbody>
            </table>
            <div class="drop" style="float: left; margin: 5px;"></div>
            <div class="equip" style="float: right; margin: 5px;"></div>
        </div>
    </div>
    <div class="col-md-4 out-menu">
        <div class="col-md-12 menu">
            <h3>Equipments</h3>
            <div class="stuffs">
                {% for stuff in stuffs %}
                    <div class="item stuff fixed"
                         title="{{ stuff['obj'].item.name }}"
                         data-stuff="{{ stuff['obj'].id }}"
                         data-type="{{ stuff['obj'].type.name }}"
                         data-toggle="popover" data-placement="top" data-trigger="hover"
                         data-content="{% include 'IdleBundle:Default:popover_equipment.html.twig' with {'stuff': stuff['obj']} %}">
                        <img src="{% if stuff['obj'].item.image is not null %}{{ asset('images/Idle/' ~ stuff['obj'].item.typeItem.name ~ '/' ~ stuff['obj'].item.image) }}{% endif %}" alt="{{ stuff['obj'].item.name }}">
                        <p>{{ stuff['obj'].item.name }} x<span class="quantity">{{ stuff['quantity'] }}</span></p>
                    </div>
                {% endfor %}
            </div>
        </div>
    </div>
{% endblock %}

{% block javascripts %}
    <script>
        $(document).ready(function() {
            $('[data-toggle="popover"]').popover({
                html: true
            });
        });

        $('.equipment').click(show_equipment_stats);

        $('.stuff').click(show_stuff_stats);

        function show_equipment_stats()
        {
            var elem = $(this);
//            console.log(elem);
            var url = '{{ path("show_equipment_stats", {'hero_id': 'HERO_ID', 'type_name': 'TYPE_NAME'}) }}';
            url = url.replace("HERO_ID", elem.closest('.details-hero').data('hero'));
            url = url.replace("TYPE_NAME", elem.closest('div').data('type'));
            console.log(url);
            var jhrx = $.ajax(url)
                .done(function (data) {
                    if (data.success) {
                        console.log('OK');

                        var equipment_selected = $('.equipment.selected');
                        var stuff_selected = $('.stuff.selected');
                        var equipment_can_select = $('.equipment.can-select');
                        var stuff_can_select = $('.stuff.can-select');

                        if (!elem.hasClass('can-select')) {
                            remove_comparison_lines();
                            remove_buttons();
                            remove_selected("stuff");
                            stuff_selected = $('.stuff.selected');
                        }

                        reset_comparison_lines_side('left');

                        draw_comparison_lines_side(data.stats, 'left');

                        remove_empty_comparison_lines();

                        equipment_can_select.removeClass('can-select'); // Remove previous can select equipments

                        equipment_selected.removeClass('selected'); // Remove previous selected equipment
                        elem.addClass('selected'); // Select clicked equipment from elem

                        elem.removeClass('can-select'); // Remove can select from elem

                        if (Object.keys(data.stats).length > 0)
                            display_button_drop(elem.closest('.details-hero').data('hero'), elem.closest('div').data('type')); // A selected equipment can be drop

                        if (stuff_selected.length == 1) { // If one stuff is selected
                            display_button_equip(elem.closest('.details-hero').data('hero'), stuff_selected.closest('div').data('stuff'));

                            if (elem.closest('div').data('type') != stuff_selected.data('type')) { // If selected equipment type is different from selected stuff type
                                stuff_selected.removeClass('selected'); // Remove selected equipment
                            }
                        }

                        stuff_can_select.removeClass('can-select'); // Remove can select stuffs
                        $('.stuff[data-type="' + elem.closest('div').data('type') + '"]').addClass(function() { // Set can select stuffs to not selected stuffs
                            return ($(this).closest('div').hasClass('selected')) ? '' : 'can-select';
                        });
                    }
                })
        }

        function show_stuff_stats()
        {
            var elem = $(this);
//            console.log(elem);
            var url = '{{ path("show_stuff_stats", {'stuff_id': 'STUFF_ID'}) }}';
            url = url.replace("STUFF_ID", elem.closest('div').data('stuff'));
            console.log(url);
            var jhrx = $.ajax(url)
                .done(function (data) {
                    if (data.success) {
                        console.log('OK');

                        var equipment_selected = $('.equipment.selected');
                        var stuff_selected = $('.stuff.selected');
                        var equipment_can_select = $('.equipment.can-select');
                        var stuff_can_select = $('.stuff.can-select');

                        if (!elem.hasClass('can-select')) { // If change type selection
                            remove_comparison_lines();
                            remove_buttons();
                            remove_selected("equipment");
                            equipment_selected = $('.equipment.selected');
                        }

                        reset_comparison_lines_side('right');

                        draw_comparison_lines_side(data.stats, 'right');

                        remove_empty_comparison_lines();

                        stuff_can_select.removeClass('can-select'); // Remove can select stuffs

                        stuff_selected.removeClass('selected'); // Remove previous selected stuff
                        elem.addClass('selected'); // Select clicked stuff from elem

                        elem.removeClass('can-select'); // Remove can select from elem

                        if (equipment_selected.length == 1) { // If one equipent is selected
                            display_button_equip(equipment_selected.closest('.details-hero').data('hero'), elem.closest('div').data('stuff')); // Can equip

                            if (elem.closest('div').data('type') != equipment_selected.data('type')) { // If selected stuff type is different from selected equipment type
                                equipment_selected.removeClass('selected'); // Remove selected equipment
                            }
                        }

                        equipment_can_select.removeClass('can-select'); // Remove can select equipments
                        $('.equipment[data-type="' + elem.closest('div').data('type') + '"]').addClass(function() { // Set can select equipments to not selected equipments
                            return ($(this).closest('div').hasClass('selected')) ? '' : 'can-select';
                        });
                    }
                })
        }

        function drop_equipment()
        {
            var elem = $(this);
//            console.log(elem);
            var url = '{{ path("drop_equipment", {'hero_id': 'HERO_ID', 'type_name': 'TYPE_NAME'}) }}';
            url = url.replace("HERO_ID", elem.closest('button').data('hero'));
            url = url.replace("TYPE_NAME", elem.closest('button').data('type'));
            console.log(url);
            var jhrx = $.ajax(url)
                .done(function (data) {
                    if (data.success) {
                        console.log('OK');

                        var hero = $('.details-hero[data-hero="' + elem.closest('button').data('hero') + '"] .equipment[data-type="' + elem.closest('button').data('type') + '"]');

                        hero.find('img').attr('src', '');

                        if (data.inventory.quantity == 1) {
                            $('.stuffs').append(addStuff(data.inventory));
                            $('.stuff').click(show_stuff_stats);
                        }
                        else {
                            console.log(data.inventory.id);
                            $('.stuff[data-stuff="' + data.inventory.id + '"] .quantity').text(data.inventory.quantity);
                        }

                        remove_buttons();
                        remove_selected("stuff");
                        remove_selected("equipment");
                        remove_comparison_lines();
                        {# TODO : Remove popover from old equipement (still appearing) #}
                    }
                })
        }

        function equip_stuff()
        {
            var elem = $(this);
//            console.log(elem);
            var url = '{{ path("equip_stuff", {'hero_id': 'HERO_ID', 'stuff_id': 'STUFF_ID'}) }}';
            url = url.replace("HERO_ID", elem.closest('button').data('hero'));
            url = url.replace("STUFF_ID", elem.closest('button').data('stuff'));
            console.log(url);
            var jhrx = $.ajax(url)
                .done(function (data) {
                    if (data.success) {
                        console.log('OK');

                        var stuff = $('.stuff[data-stuff="' + elem.closest('button').data('stuff') + '"]');
                        var hero = $('.details-hero[data-hero="' + elem.closest('button').data('hero') + '"] .equipment[data-type="' + stuff.data('type') + '"]');

                        hero.find('img').attr('src', stuff.find('img').attr('src'));

                        $.each(data.inventory, function (key, arr) {
                            if (arr.quantity == 0) {
                                $('.stuff[data-stuff="' + arr.id + '"]').remove();
                            }
                            else if (arr.quantity == 1 && arr.msg == "new") {
                                $('.stuffs').append(addStuff(arr));
                                $('.stuff').click(show_stuff_stats);
                            }
                            else { // if arr.quantity > 1
                                $('.stuff[data-stuff="' + arr.id + '"] .quantity').text(arr.quantity);
                            }
                        });

                        remove_buttons();
                        remove_selected("stuff");
                        remove_selected("equipment");
                        remove_comparison_lines();
                    }
                })
        }

        function draw_comparison_line(key, value, side)
        {
            var negative = false;
            if (key == "attackDelay") {
                negative = true;
            }

            var line = $('.comparison-line .' + key);

            if (line.length == 0) {
                $('.comparison-line').append('<tr class="' + key + '">' +
                '<td>' + formatType(key) + '</td>' +
                '<td class="left">0</td>' +
                '<td class="compare">0</td>' +
                '<td class="right">0</td>' +
                '</tr>');
            }

            line = $('.comparison-line .' + key + ' .' + side);
            line.text(value);

            var compareLine = $('.comparison-line .' + key + ' .compare');
            var rightLine = $('.comparison-line .' + key + ' .right');
            var leftLine = $('.comparison-line .' + key + ' .left');
            var res = rightLine.text() - leftLine.text();
            if ((!negative && res > 0) || (negative && res < 0)) {
                compareLine.text("+" + Math.abs(res));
                compareLine.css('color', 'darkgreen');
            }
            else if ((!negative && res < 0) || (negative && res > 0)) {
                compareLine.text("+" + Math.abs(res));
                compareLine.css('color', 'darkred');
            }
            else {
                compareLine.text(res);
            }
        }

        function display_button_drop(hero_id, type_name)
        {
            if ($('.drop .btn-drop').length == 0) {
                $('.drop').append('<button class="btn btn-danger btn-drop" data-hero="' + hero_id + '" data-type="' + type_name + '">Drop</button>');
                $('.btn-drop').click(drop_equipment);
            }
        }
        function display_button_equip(hero_id, stuff_id)
        {
            if ($('.equip .btn-equip').length == 0) {
                $('.equip').append('<button class="btn btn-success btn-equip" data-hero="' + hero_id + '" data-stuff="' + stuff_id + '">Equip</button>');
                $('.btn-equip').click(equip_stuff);
            }
        }
        function remove_buttons()
        {
            var equip_btn = $('.equip .btn-equip');
            var drop_btn = $('.drop .btn-drop');

            if (equip_btn.length == 1)
                equip_btn.remove();
            if (drop_btn.length == 1)
                drop_btn.remove();
        }
        function remove_comparison_lines()
        {
            var comparison_lines = $('.comparison-line tr');
            comparison_lines.remove();
        }
        function remove_selected(type)
        {
            var elem_selected = $('.' + type + '.selected');
            elem_selected.removeClass('selected');
        }
        function reset_comparison_lines_side(side)
        {
            var comparison_lines = $('.comparison-line tr');

            comparison_lines.each(function () {
                $(this).children('.' + side).text(0);
            });
        }
        function draw_comparison_lines_side(stats, side)
        {
            $.each(stats, function (key, arr) {
                if (arr > 0) {
                    draw_comparison_line(key, arr, side);
                }
            });
        }
        function remove_empty_comparison_lines()
        {
            var comparison_lines = $('.comparison-line tr');

            comparison_lines.each(function () {
                if ($(this).children('.left').text() == 0 && $(this).children('.right').text() == 0)
                    $(this).remove();
            });
        }

        function addStuff(stuff)
        {
            return '<div class="item stuff fixed" data-stuff="' + stuff.id + '" data-type="' + stuff.type + '">' +
                '<img src="' + ((stuff.image != null) ? stuff.image : "") + '" alt="' + stuff.name + '">' +
                '<p>' + stuff.name + ' x<span class="quantity">' + stuff.quantity + '</span></p>' +
                '</div>';
        }

        function formatType(string)
        {
            var result = string.replace( /([A-Z])/g, " $1" );
            return result.charAt(0).toUpperCase() + result.slice(1);
        }
    </script>
{% endblock %}