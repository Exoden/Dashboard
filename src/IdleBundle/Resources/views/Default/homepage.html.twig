{% extends "IdleBundle:Default:index.html.twig" %}

{% block title %}{{ parent() }}Homepage{% endblock %}

{% block header %}
    <div class="row">
        <div class="col-md-12">
            <h1>Idle HomePage</h1>
        </div>
    </div>
{% endblock %}

{% block page %}
    <div class="row">
        {{ include('AppBundle::flash_messages.html.twig') }}
        <div class="col-md-6 out-menu">
            <div class="col-md-12 menu">
                {% for key, hero in heroes %}
                    <div id="hero_{{ key }}" class="row details-hero {#{% if hero.isSelected == true %}selected{% endif %}#}">
                        <div class="col-md-4 character" data-value="{{ hero.id }}">
                            {#<span title="{{ hero.name }}" data-toggle="popover" data-placement="top" data-trigger="hover" data-content="#}
                                    {#Age: {{ hero.age }}<br />#}
                                    {#Level: {{ hero.level }}<br />#}
                                    {#Experience: {{ hero.experience }}<br />#}
                                    {#State: {% if hero.isRested %}OK{% else %}KO{% endif %}">#}
                            <img src="" alt="hero" class="hero">
                            {#</span>#}
                            <h2 class="damage"></h2>
                        </div>
                        <div class="col-md-8">
                            <div class="row top">
                                <div class="col-md-3">
                                    <p>
                                        {{ hero.name }} ({{ hero.age }})
                                        {# TODO : Barre d'hp #}
                                        {# TODO : Icone etat #}
                                        {% if hero.isRested %}OK{% else %}KO{% endif %}
                                        {#Level: {{ hero.level }}#}
                                        {#Experience: {{ hero.experience }}#}
                                        {#State: {% if hero.isRested %}OK{% else %}KO{% endif %}#}
                                    </p>
                                </div>
                                <div class="col-md-9 progress progress-hp" title="HP : {{ hero.currentHealth }}/{{ hero.characteristics.health }}">
                                    <div class="progress-bar-hp" role="progressbar" data-value="{{ hero.currentHealth }}" style="width: {{ (hero.currentHealth / hero.characteristics.health) * 100 }}%"></div>
                                </div>
                            </div>
                            <div class="row one">
                                {% for type, equipment in equipments[key]|slice(0, 3) %}
                                    <span title="{% if equipment is not null %}{{ equipment.item.name }}{% endif %}"
                                         data-toggle="popover" data-placement="top" data-trigger="hover"
                                         data-content="{% if equipment is not null %}{% include 'IdleBundle:Default:popover_equipment.html.twig' with {'stuff': equipment} %}{% endif %}">
                                        <img src="{% if equipment is not null %}{{ asset('images/Idle/' ~ equipment.item.typeItem.name ~ '/' ~ equipment.item.image) }}{% endif %}" alt="{{ type|lower }}">
                                    </span>
                                {% endfor %}
                            </div>
                            <div class="row two">
                                {% for type, equipment in equipments[key]|slice(3) %}
                                    <span title="{% if equipment is not null %}{{ equipment.item.name }}{% endif %}"
                                          data-toggle="popover" data-placement="top" data-trigger="hover"
                                          data-content="{% if equipment is not null %}{% include 'IdleBundle:Default:popover_equipment.html.twig' with {'stuff': equipment} %}{% endif %}">
                                        <img src="{% if equipment is not null %}{{ asset('images/Idle/' ~ equipment.item.typeItem.name ~ '/' ~ equipment.item.image) }}{% endif %}" alt="{{ type|lower }}">
                                    </span>
                                {% endfor %}
                            </div>
                            <div class="row bottom">
                                <div class="col-md-3">
                                    {#<p class="level">Level: {{ hero.level }}</p>#}
                                        {# TODO : Barre d'xp #}
                                        {#HP: {{ hero.characteristics.health }}#}
                                        {#Armor:  {{ hero.characteristics.armor }}#}
                                        {#Dodge: {{ hero.characteristics.dodge }}#}
                                        {#Attack: {{ hero.characteristics.damageMinimum }}-{{ hero.characteristics.damageMaximum }}#}
                                        {#Delay: {{ hero.characteristics.attackDelay }}#}
                                        {#Precision: {{ hero.characteristics.hitPrecision }}#}
                                </div>
                                {#<div class="col-md-9 progress progress-exp" title="Exp. : {{ hero.experience }}/{{ next_level[key] }}">#}
                                    {#<div class="progress-bar-exp" role="progressbar" data-value="{{ hero.experience }}" style="width: {{ (hero.experience / next_level[key]) * 100 }}%"></div>#}
                                {#</div>#}
                            </div>
                        </div>
                    </div>
                {% endfor %}
                {% if form is defined %}
                    <div data-toggle="modal" data-target="#myModal"><img src="{{ asset('images/plus.png') }}"></div>
                {% endif %}
            </div>
        </div>


        <div class="col-md-6 out-menu">
            <div class="col-md-12 menu">
                {% for key, hero in heroes %}
                    <div id="mob_{{ key }}" class="row details-mob">
                        <div class="col-md-4 character">
                            <img src="{{ asset('images/Idle/Enemy/' ~ hero.target.enemy.image) }}" alt="monster" class="monster">
                            <h2 class="damage"></h2>
                        </div>
                        <div class="col-md-8">
                            <div class="row top">
                                <div class="row">
                                    <div class="btn-group" role="group"> {# TODO : buttons Ajax => change area, regenerate battleHistory #}
                                        <a href="#" class="btn btn-primary btn-xs{% if hero.area.id == 1 %} active{% endif %}">Plain</a>
                                        <a href="#" class="btn btn-primary btn-xs{% if hero.area.id == 2 %} active{% endif %}">Forest</a>
                                        <a href="#" class="btn btn-primary btn-xs{% if hero.area.id == 3 %} active{% endif %}">Mountain</a>
                                        <a href="#" class="btn btn-primary btn-xs{% if hero.area.id == 4 %} active{% endif %}">Volcano</a>
                                    </div>
                                </div>
                                <div class="row">
                                    <div class="col-md-9">
                                        <p>Field {{ hero.fieldLevel }}</p>
                                    </div>
                                    <div class="col-md-3">
                                        <p>Field Max {{ hero.fieldMaxLevel }}</p>
                                    </div>
                                </div>
                                <div class="col-md-3">
                                    <p>{{ hero.target.enemy.name }}</p>
                                </div>
                                <div class="col-md-9 progress progress-hp" title="HP : {{ hero.target.currentHealth }}/{{ hero.target.enemy.characteristics.health }}">
                                    <div class="progress-bar-hp" role="progressbar" data-value="{{ hero.target.currentHealth }}" style="width: {{ ( hero.target.currentHealth * 100) / hero.target.enemy.characteristics.health }}%"></div>
                                </div>
                            </div>
                            <div class="row bottom">
                                <div class="col-md-3">
                                    Health: {{ hero.target.enemy.characteristics.health }}
                                </div>
                                <div class="col-md-3">
                                    Armor: {{ hero.target.enemy.characteristics.armor }}
                                </div>
                                <div class="col-md-3">
                                    Dodge: {{ hero.target.enemy.characteristics.dodge }}%
                                </div>
                                <div class="col-md-3">
                                    Delay: {{ hero.target.enemy.characteristics.attackDelay }} sec
                                </div>
                            </div>
                        </div>
                    </div>
                {% endfor %}
            </div>
        </div>
    </div>

    {% if form is defined %}
        <!-- Modal -->
        <div class="modal fade" id="myModal" tabindex="-1" role="dialog" aria-labelledby="myModalLabel">
            <div class="modal-dialog modal-sm" role="document">
                <div class="modal-content">
                    <div class="modal-header">
                        <button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>
                        <h4 class="modal-title" id="myModalLabel">Create new Hero</h4>
                    </div>
                    <div class="modal-body">
                        {{ form_start(form) }}

                        <div class="bg-danger">
                            {{ form_errors(form) }}
                        </div>

                        {{ form_widget(form.name, {'attr': {'class': 'form-control'}}) }}
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
                        {{ form_widget(form.save, {'attr': {'class': 'btn btn-primary'}}) }}
                        {#<button type="button" class="btn btn-primary">Save changes</button>#}
                    </div>
                    {{ form_end(form) }}
                </div>
            </div>
        </div>
    {% endif %}
{% endblock %}

{% block javascripts %}
<script>
    $(document).ready(function(){
        $('[data-toggle="popover"]').popover({
            html:true
        });

//        $('a[rel=popover-img]').popover({
//            html: true,
//            trigger: 'hover',
//            placement: 'top',
//            content: function() { return '<img src="' + $(this).data('img') + '" />'; }
//        });
    });

    {% for key, hero in heroes %}
        getBattleHistory({{ key }});
    {% endfor %}

    function getBattleHistory(id)
    {
        var url = '{{ path("battle_history", {'hero_id': 'HERO_ID'}) }}';
        url = url.replace("HERO_ID", $('#hero_' + id).children('.character').data('value'));
        console.log(url);


        var jhrx = $.ajax({
            method: "POST",
            url: url
        })
            .done(function (data) {
                console.log('done');
                var obj = data;
                if (obj.success) {
                    console.log('success');
                    animateBattle(obj.battle_history, id);
                }
            })
    }

    function animateBattle(bh, id)
    {
        $.each(bh, function(key, arr) {
            if ((arr.time * 1000) >= (new Date()).getTime()) { // arr[key] time is past now, so we must play previous key
//                console.log((new Date()).getTime());
                console.log(key + ": " + bh[key-1].time * 1000 + ": " + bh[key-1].damage + ": " + bh[key-1].currentHealth + "/" + bh[key-1].health);

                var t = (new Date()).getTime();
                var progress_bar_mob = $('#mob_' + id + ' .progress-bar-hp');
                var progress_bar_hero = $('#hero_' + id + ' .progress-bar-hp');

                if (bh[key-1].type == "HIT_E") { // Attack
                    console.log('HIT_E');

                    progress_bar_mob.data('value', bh[key-1].currentHealth);

                    progress_bar_mob.animate({width: ((bh[key-1].currentHealth * 100) / bh[key-1].health) + '%'}, 200);
                    $('#mob_' + id + ' .progress-hp').attr('title', "HP : " + bh[key-1].currentHealth + "/" + bh[key-1].health);
                    $('#mob_' + id + ' .damage')
                        .html(bh[key-1].damage)
                        .removeAttr('style')
                        .animate({opacity: 0, top: "-=100px"}, 1000);

//                    console.log('next call : ' + ((arr.time * 1000) - (new Date()).getTime()));
                    window.setTimeout(function () {
                        animateBattle(bh.slice(key), id); // we slice from the current element, because we skip the played element (key-1)
                    }, Math.floor(arr.time * 1000) - t);
                    return false;
                }
                else if (bh[key-1].type == "HIT_H") { // Attack
                    console.log('HIT_H');

                    progress_bar_hero.data('value', bh[key-1].currentHealth);

                    progress_bar_hero.animate({width: ((bh[key-1].currentHealth * 100) / bh[key-1].health) + '%'}, 200);
                    $('#hero_' + id + ' .progress-hp').attr('title', "HP : " + bh[key-1].currentHealth + "/" + bh[key-1].health);
                    $('#hero_' + id + ' .damage')
                        .html(bh[key-1].damage)
                        .removeAttr('style')
                        .animate({opacity: 0, top: "-=100px"}, 1000);

                    window.setTimeout(function () {
                        animateBattle(bh.slice(key), id); // we slice from the current element, because we skip the played element (key-1)
                    }, Math.floor(arr.time * 1000) - t);
                    return false;
                }
                else if (bh[key-1].type == "GEN") { // Generate Enemy
                    console.log('GEN');

                    $('#mob_' + id + 'img').attr('src', bh[key-1].image);
                    progress_bar_mob.data('value', bh[key-1].currentHealth);
                    progress_bar_mob.animate({width: '100%'}, 200);

                    if (typeof (bh[key-1].loot_msg) !== 'undefined')
                        $('#flash-messages').flashNotification('addSuccess', bh[key-1].loot_msg);
                    console.log(bh[key-1].loots);

                    window.setTimeout(function () {
                        animateBattle(bh.slice(key), id); // we slice from the current element, because we skip the played element (key-1)
                    }, Math.floor(arr.time * 1000) - t);
                    return false;
                }
            }
        });
    }

    {#function animateBattle(id) {#}
        {#var hp{{ key }} = $('#mob{{ key }} .progress-bar-hp').data('value');#}

        {#{% if equipments[key]['weapon'].characteristics is defined %}#}
        {#{% set weapon = equipments[key]['weapon'].characteristics %}#}
        {#{% else %}#}
        {#{% set weapon = hero.characteristics %}#}
        {#{% endif %}#}

        {#var delay = {{ weapon.attackDelay }};#}
        {#var hit = window.setInterval(function () {#}
            {#if (hp{{ key }} > 0) { // Hit the mob#}
                {#var damage = Math.floor(Math.random() * ({{ weapon.damageMaximum }} - {{ weapon.damageMinimum }} +1)) + {{ weapon.damageMinimum }};#}
                {#hp{{ key }} -= damage;#}
                {#if (hp{{ key }} < 0)#}
                    {#hp{{ key }} = 0;#}
                {#$('#mob{{ key }} .progress-bar-hp').animate({width: ((hp{{ key }} / 100) * 100) + '%'}, 200);#}
                {#$('#mob{{ key }} .progress-hp').attr('title', "HP : " + hp{{ key }} + "/100");#}
                {#$('#mob{{ key }} .damage').html(damage);#}
                {#$('#mob{{ key }} .damage').removeAttr('style');#}
                {#$('#mob{{ key }} .damage').animate({opacity: 0, top: "-=90px"}, 500);#}


                {#if (hp{{ key }} <= 0) { // New mob : Full life#}
                    {#earnExp('{{ key }}', 1);#}
                    {#clearInterval(hit);#}
                    {#window.setTimeout(function () {#}
                        {#hp{{ key }} = 100;#}
                        {#$('#mob{{ key }} .progress-bar-hp').animate({width: '100%'}, 200);#}
                        {#animateBattle(id);#}
                    {#}, 1000);#}
                {#}#}
            {#}#}
        {#}, delay * 1000);#}
    {#}#}

    {#{% for key, hero in heroes %}#}
        {#animateBattle({{ key }});#}
    {#var hp{{ key }} = $('#mob{{ key }} .progress-bar-hp').data('value');#}

    {#{% if equipments[key]['weapon'].characteristics is defined %}#}
    {#{% set weapon = equipments[key]['weapon'].characteristics %}#}
    {#{% else %}#}
    {#{% set weapon = hero.characteristics %}#}
    {#{% endif %}#}

    {#var delay = {{ weapon.attackDelay }};#}
    {#var hit = window.setInterval(function () {#}
        {#if (hp{{ key }} > 0) { // Hit the mob#}
            {#var damage = Math.floor(Math.random() * ({{ weapon.damageMaximum }} - {{ weapon.damageMinimum }} +1)) + {{ weapon.damageMinimum }};#}
            {#hp{{ key }} -= damage;#}
            {#if (hp{{ key }} < 0)#}
                {#hp{{ key }} = 0;#}
            {#$('#mob{{ key }} .progress-bar-hp').animate({width: ((hp{{ key }} / 100) * 100) + '%'}, 200);#}
            {#$('#mob{{ key }} .progress-hp').attr('title', "HP : " + hp{{ key }} + "/100");#}
            {#$('#mob{{ key }} .damage').html("-" + damage);#}
            {#$('#mob{{ key }} .damage').removeAttr('style');#}
            {#$('#mob{{ key }} .damage').animate({opacity: 0, top: "-=90px"}, 1000);#}


            {#if (hp{{ key }} <= 0) { // New mob : Full life#}
                {#earnExp('{{ key }}', 1);#}
{#//                clearInterval(hit);#}
                {#window.setTimeout(function () {#}
                    {#hp{{ key }} = 100;#}
                    {#$('#mob{{ key }} .progress-bar-hp').animate({width: '100%'}, 200);#}
{#//                    animateBattle(id);#}
                {#}, 1000);#}
            {#}#}
        {#}#}
    {#}, delay * 1000);#}
    {#{% endfor %}#}

    {#function earnExp(id, xp) {#}
        {#var url = '{{ path("exp_hero", {'hero_id': 'HERO_ID'}) }}';#}
        {#url = url.replace("HERO_ID", $('#hero' + id).children('.character').data('value'));#}
{#//        console.log(url);#}
        {#var jhrx = $.ajax({#}
                {#method: "POST",#}
                {#url: url,#}
                {#data: { exp: xp }#}
            {#})#}
            {#.done(function (data) {#}
                {#var obj = data;#}
                {#if (obj.success) {#}
                    {#$('#hero' + id + ' .progress-exp .progress-bar-exp').animate({ width: ((obj.experience / obj.next_level) * 100) + '%' }, 200);#}
                    {#$('#hero' + id + ' .progress-exp').attr('title', "Exp. : " + obj.experience + "/" + obj.next_level);#}
                    {#$('#hero' + id + ' .level').html("Level: " + obj.level)#}
                {#}#}
            {#})#}
    {#}#}


    {#$('.character').click(function (e) {#}
        {#var url = '{{ path("switch_hero", {'hero_id': 'HERO_ID'}) }}';#}
        {#url = url.replace("HERO_ID", $(e.target).closest('.character').data('value'));#}
{#//        console.log(url);#}
        {#var jhrx = $.ajax(url)#}
            {#.done(function (data) {#}
                {#var obj = data;#}
                {#if (obj.success) {#}
                    {#{% for key, hero in heroes %}#}
                    {#if ($('#hero{{ key }}').hasClass('selected'))#}
                        {#$('#hero{{ key }}').removeClass('selected');#}
                    {#if ($('#hero{{ key }}').children('.character').data('value') == obj.selected_hero_id)#}
                        {#$('#hero{{ key }}').addClass('selected');#}
                    {#{% endfor %}#}
                {#}#}
            {#})#}
    {#});#}

//    var click_up = 1;
//
//    function changePoints(nb) {
//        var points = getPoints();
//        points += nb;
//        $("#points").html(points);
//    }
//
//    function getPoints() {
//        return Number($("#points").html());
//    }
//
//    $("#click").click(function () {
//        changePoints(click_up);
//    });
//
//    $("#up").click(function () {
//        if (getPoints() >= 10) {
//            changePoints(-10);
//            click_up++;
//        }
//    });
//
//    $("#auto-up").click(function () {
//        if (getPoints() >= 5) {
//            console.log('got up !');
//            changePoints(-5);
//            window.setInterval(function () {
//                changePoints(1);
//            }, 3000);
//        }
//        else {
//            console.log('no...')
//        }
//    });
</script>
{% endblock %}