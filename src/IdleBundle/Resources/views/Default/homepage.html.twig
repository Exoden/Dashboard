{% extends "IdleBundle:Default:index.html.twig" %}

{% block title %}{{ parent() }}Homepage{% endblock %}

{% block header %}
    <div class="row">
        <div class="col-md-12">
            <h1>Idle HomePage</h1>
        </div>
    </div>
{% endblock %}

{% block page %}
    <div class="row">
        {{ include('AppBundle::flash_messages.html.twig') }}
        <div class="col-md-6 out-menu">
            <div class="col-md-12 menu">
                <div class="row">
                    0 <img src="{{ asset('images/Idle/Icon/soul.png') }}" title="Souls">
                </div>
                {% for key, hero in heroes %}
                    <div id="hero_{{ key }}" class="row details-hero {#{% if hero.isSelected == true %}selected{% endif %}#}">
                        <div class="col-md-4 character" data-value="{{ hero.id }}">
                            {#<span title="{{ hero.name }}" data-toggle="popover" data-placement="top" data-trigger="hover" data-content="#}
                                    {#Age: {{ hero.age }}<br />#}
                                    {#Level: {{ hero.level }}<br />#}
                                    {#Experience: {{ hero.experience }}<br />#}
                                    {#State: {% if hero.isRested %}OK{% else %}KO{% endif %}">#}
                            <img src="{{ asset('images/Idle/Character/HumanF.png') }}" alt="hero" class="hero">
                            {#</span>#}
                            <h2 class="damage"></h2>
                            <h2 class="heal"></h2>
                        </div>
                        <div class="col-md-8">
                            <div class="row top">
                                <div class="col-md-3">
                                    <p>
                                        {{ hero.name }} ({{ hero.age }})
                                        {# TODO : Barre d'hp #}
                                        {# TODO : Icone etat #}
                                        {#{% if hero.isRested %}OK{% else %}KO{% endif %}#}
                                        <img src="{{ asset('images/Idle/Icon/state_good.png') }}" title="Healthy">
                                        <img src="{{ asset('images/Idle/Icon/state_bad.png') }}" title="Sick">
                                        <img src="{{ asset('images/Idle/Icon/state_rest.png') }}" title="Resting">
                                        <img src="{{ asset('images/Idle/Icon/state_poison.png') }}" title="Poisoned">
                                        {#Level: {{ hero.level }}#}
                                        {#Experience: {{ hero.experience }}#}
                                        {#State: {% if hero.isRested %}OK{% else %}KO{% endif %}#}
                                    </p>
                                </div>
                                <div class="col-md-6">
                                    <div class="progress progress-hp" title="HP : {{ hero.currentHealth }}/{{ hero.characteristics.health }}">
                                        <div class="progress-bar-hp" role="progressbar" data-value="{{ hero.currentHealth }}" style="width: {{ (hero.currentHealth / hero.characteristics.health) * 100 }}%"></div>
                                    </div>
                                </div>
                                <div class="col-md-3" style="text-align: right">
                                    <a class="btn btn-default btn-circle manage_food" data-value="{{ hero.id }}" title="Potions"><img src="{{ asset('images/Idle/Icon/potion.png') }}"></a>
                                    <a class="btn btn-default btn-circle skill_tree" data-value="{{ hero.id }}" title="Skills"><img src="{{ asset('images/Idle/Icon/skills.png') }}"></a>
                                </div>
                            </div>
                            <div class="row one">
                                {% for type, equipment in equipments[key]|slice(0, 3) %}
                                    <span title="{% if equipment is not null %}{{ equipment.item.name }}{% endif %}"
                                         data-toggle="popover" data-placement="top" data-trigger="hover"
                                         data-content="{% if equipment is not null %}{% include 'IdleBundle:Default:popover_equipment.html.twig' with {'stuff': equipment} %}{% endif %}">
                                        <img class="bordered" src="{% if equipment is not null %}{{ asset('images/Idle/' ~ equipment.item.typeItem.name ~ '/' ~ equipment.item.image) }}{% endif %}" alt="{{ type|lower }}">
                                    </span>
                                {% endfor %}
                            </div>
                            <div class="row two">
                                {% for type, equipment in equipments[key]|slice(3) %}
                                    <span title="{% if equipment is not null %}{{ equipment.item.name }}{% endif %}"
                                          data-toggle="popover" data-placement="top" data-trigger="hover"
                                          data-content="{% if equipment is not null %}{% include 'IdleBundle:Default:popover_equipment.html.twig' with {'stuff': equipment} %}{% endif %}">
                                        <img class="bordered" src="{% if equipment is not null %}{{ asset('images/Idle/' ~ equipment.item.typeItem.name ~ '/' ~ equipment.item.image) }}{% endif %}" alt="{{ type|lower }}">
                                    </span>
                                {% endfor %}
                            </div>
                            <div class="row bottom">
                                <div class="col-md-3">
                                    {#<p class="level">Level: {{ hero.level }}</p>#}
                                        {# TODO : Barre d'xp #}
                                        {#HP: {{ hero.characteristics.health }}#}
                                        {#Armor:  {{ hero.characteristics.armor }}#}
                                        {#Dodge: {{ hero.characteristics.dodge }}#}
                                        {#Attack: {{ hero.characteristics.damageMinimum }}-{{ hero.characteristics.damageMaximum }}#}
                                        {#Delay: {{ hero.characteristics.attackDelay }}#}
                                        {#Precision: {{ hero.characteristics.hitPrecision }}#}
                                </div>
                                {#<div class="col-md-9 progress progress-exp" title="Exp. : {{ hero.experience }}/{{ next_level[key] }}">#}
                                    {#<div class="progress-bar-exp" role="progressbar" data-value="{{ hero.experience }}" style="width: {{ (hero.experience / next_level[key]) * 100 }}%"></div>#}
                                {#</div>#}
                            </div>
                        </div>
                    </div>
                {% endfor %}
                {% if canCreateHero %}
                    <a class="btn" id="create_hero" title="Create a new Hero"><img src="{{ asset('images/plus.png') }}"></a> {# data-toggle="modal" data-target="#myModal" #}
                {% endif %}
            </div>
        </div>


        <div class="col-md-6 out-menu">
            <div class="col-md-12 menu">
                {% for key, hero in heroes if heroes is defined and hero.target is defined %}
                    {% set enemy = hero.target.enemy %}
                    <div id="mob_{{ key }}" class="row details-mob">
                        {% include 'IdleBundle:Default:draw_homepage_enemy.html.twig' %}
                    </div>
                {% endfor %}
            </div>
        </div>
    </div>

    <div class="modal fade" id="my_modal" tabindex="-1" role="dialog" aria-labelledby="myModalLabel"></div>
{% endblock %}

{% block javascripts %}
<script>
    $(document).ready(function(){
        $('[data-toggle="popover"]').popover({
            html:true
        });

//        $('a[rel=popover-img]').popover({
//            html: true,
//            trigger: 'hover',
//            placement: 'top',
//            content: function() { return '<img src="' + $(this).data('img') + '" />'; }
//        });


        $('.manage_food').click(function () {
            var url = '{{ path("manage_food", {'hero_id': 'HERO_ID'}) }}';
            url = url.replace("HERO_ID", $(this).data('value'));
            console.log(url);

            $.ajax({
                method: "POST",
                url: url
            })
                .done(function (data) {
                    $('#my_modal').html(data).modal();

                    var modal_form = $('#modal_form');
                    modal_form.submit(function () {
                        console.log('submit');
                        $.ajax({
                            method: "POST",
                            url: url
                        })
                    });
                });
        });

        {#$('.skill_tree').click(function () {#}
            {#var url = '{{ path("hero_skill_tree", {'hero_id': 'HERO_ID'}) }}';#}
            {#url = url.replace("HERO_ID", $(this).data('value'));#}
            {#console.log(url);#}

            {#$.ajax({#}
                {#method: 'POST',#}
                {#url: url,#}
                {#dataType: 'html'#}
            {#})#}
                {#.done(function (data) {#}
                    {#$('#my_modal').html(data).modal();#}

                    {#var modal_form = $('#modal_form');#}
                    {#modal_form.submit(function () {#}
                        {#console.log('submit');#}
                        {#$.ajax({#}
                            {#method: 'POST',#}
                            {#url: url,#}
                            {#dataType: 'json'#}
                        {#})#}
                    {#});#}
                {#});#}
        {#});#}

        $('#create_hero').click(function () {
            var url = '{{ path("create_hero") }}';
            console.log(url);
            var modal = $('#my_modal');
            console.log(modal);
            var form = null;

            $.ajax({
                url: url,
                type: 'POST',
                dataType: 'html',
                success: function (data) {
                    modal.html(data).modal();

                    form = $('#modal_form');
                    console.log(form);

                    form.submit(function (e) {
                        e.preventDefault();

                        console.log('submit');

                        $.ajax({
                            url: form.attr('action'),
                            type: 'POST',
                            data: form.serialize(),
                            dataType: 'json',
                            success: function (data) {
                                console.log('DONE !');
                                console.log(data);
                                modal.modal('hide');
                            },
                            fail: function (jqXHR, textStatus, errorThrown) {
                                alert('Une erreur est survenue');
                            }
                        });
                    });
                },
                fail: function (jqXHR, textStatus, errorThrown) {
                    alert('Une erreur est survenue');
                }
            });
        });
    });

    {#{% for key, hero in heroes %}#}
        {#getBattleHistory({{ key }});#}
    {#{% endfor %}#}
    getBattleHistory(0); {# TODO : first hero only #}

    function getBattleHistory(id)
    {
        var url = '{{ path("battle_history", {'hero_id': 'HERO_ID'}) }}';
        url = url.replace("HERO_ID", $('#hero_' + id).children('.character').data('value'));
        console.log(url);

        $.ajax({
            method: "POST",
            url: url
        })
            .done(function (data) {
                console.log('done');
                var obj = data;
                if (obj.success) {
                    console.log('success');
                    if (obj.battle_history.length > 0) {
                        if ((obj.battle_history[0].time * 1000) <= (new Date()).getTime()) {
                            animateBattle(obj.battle_history, id);
                        }
                        else {
                            setTimeout(function () {
                                animateBattle(obj.battle_history, id);
                            }, Math.floor(obj.battle_history[0].time * 1000) - (new Date()).getTime());
                        }
                    }
                }
            });
    }

    function animateBattle(bh, id) {
        console.log(id + ". " + bh.length + "] " + bh[0].type + " - " + bh[0].time * 1000 + ": " + bh[0].damage + ": (" + bh[0].heal + ": " + bh[0].item_id + "): " + bh[0].currentHealth + "/" + bh[0].health);

        var t = (new Date()).getTime();
        var progress_bar_mob = $('#mob_' + id + ' .progress-bar-hp');
        var progress_bar_hero = $('#hero_' + id + ' .progress-bar-hp');

        if (bh[0].type == "HIT_E") { // Attack Enemy
            progress_bar_mob.data('value', bh[0].currentHealth);
            $('#mob_' + id + ' .current_health').text(bh[0].currentHealth);

            progress_bar_mob.animate({width: ((bh[0].currentHealth * 100) / bh[0].health) + '%'}, 200);
            $('#mob_' + id + ' .progress-hp').attr('title', "HP : " + bh[0].currentHealth + "/" + bh[0].health);
            $('#mob_' + id + ' .damage')
                .html(bh[0].damage)
                .removeAttr('style')
                .animate({opacity: 0, top: "-=100px"}, 1000);
            {#if (bh[0].currentHealth <= 0) {#}
                {# TODO : animate fadein img without border #}
                {#$('#mob_' + id + ' img').animate({opacity: 0}, 1000);#}
            {#}#}
        }
        else if (bh[0].type == "HIT_H") { // Attack Hero
            progress_bar_hero.data('value', bh[0].currentHealth);

            progress_bar_hero.animate({width: ((bh[0].currentHealth * 100) / bh[0].health) + '%'}, 200);
            $('#hero_' + id + ' .progress-hp').attr('title', "HP : " + bh[0].currentHealth + "/" + bh[0].health);
            $('#hero_' + id + ' .damage')
                .html(bh[0].damage)
                .removeAttr('style')
                .animate({opacity: 0, top: "-=100px"}, 1000);
        }
        else if (bh[0].type == "FOOD" || bh[0].type == "REGEN") { // Heal Hero
            progress_bar_hero.data('value', bh[0].currentHealth);

            progress_bar_hero.animate({width: ((bh[0].currentHealth * 100) / bh[0].health) + '%'}, 200);
            $('#hero_' + id + ' .progress-hp').attr('title', "HP : " + bh[0].currentHealth + "/" + bh[0].health);
            $('#hero_' + id + ' .heal')
                .html(bh[0].heal)
                .removeAttr('style')
                .animate({opacity: 0, top: "-=100px"}, 1000);
        }
        else if (bh[0].type == "STA") { // Change State
            {# TODO!OOOOOOOO #}
        }
        else if (bh[0].type == "GEN") { // Generate Enemy
            $('#mob_' + id).html(bh[0].block_html);

//            $('#mob_' + id + ' img.monster').attr('src', bh[0].image);
////            $('#mob_' + id + ' img').css('opacity', 100);
//            progress_bar_mob.data('value', bh[0].currentHealth);
//            progress_bar_mob.animate({width: '100%'}, 200);
//            $('#mob_' + id + ' .current_health').text(bh[0].currentHealth);
//            $('#mob_' + id + ' .max_health').text(bh[0].stats.health);
//            $('#mob_' + id + ' .armor').text(bh[0].stats.armor);
//            $('#mob_' + id + ' .dodge').text(bh[0].stats.dodge);
//            $('#mob_' + id + ' .attack_delay').text(bh[0].stats.attackDelay);

            if (typeof (bh[0].loot_msg) !== 'undefined')
                $('#flash-messages').flashNotification('addSuccess', bh[0].loot_msg);
        }

//                console.log('next call : ' + ((bh[1].time * 1000) - (new Date()).getTime()));
        if (bh.length > 1) {
            if ((bh[1].time * 1000) <= (new Date()).getTime()) { // if next time is already passed, play it now
                animateBattle(bh.slice(1), id);
            }
            else {
                window.setTimeout(function () {
                    animateBattle(bh.slice(1), id); // we slice to the next element
                }, Math.floor(bh[1].time * 1000) - t);
                return false;
            }
        }
        else {
            getBattleHistory(id);
        }
    }
</script>
{% endblock %}